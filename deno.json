{
  "name": "@discere-os/zlib.wasm",
  "version": "1.4.2",
  "description": "High-performance zlib compression with SIMD optimizations for WebAssembly",
  "exports": {
    ".": "./src/lib/index.ts",
    "./types": "./src/lib/types.ts"
  },
  "imports": {
    "@std/assert": "jsr:@std/assert@^1.0.14",
    "module": "data:application/javascript,export const createRequire = () => (id) => { if (id === 'path') return { dirname: () => '', join: (...args) => args.join('/') }; if (id === 'url') return { fileURLToPath: (url) => url.replace('file://', '') }; if (id === 'fs') return { readFileSync: () => { throw new Error('fs not supported'); } }; throw new Error(`Module ${id} not found`); }; export default { createRequire };",
    "path": "data:application/javascript,export const dirname = () => ''; export const join = (...args) => args.join('/'); export default { dirname, join };",
    "url": "data:application/javascript,export const fileURLToPath = (url) => url.replace('file://', ''); export default { fileURLToPath };",
    "fs": "data:application/javascript,export const readFileSync = () => { throw new Error('fs not supported'); }; export default { readFileSync };"
  },
  "tasks": {
    "demo": "deno run --allow-read --allow-write demo-deno.ts",
    "test": "deno test --allow-read --no-check tests/deno/",
    "test:basic": "deno test --allow-read --no-check tests/deno/basic.test.ts",
    "build": "deno task build:wasm",
    "build:wasm": "./build-dual.sh all",
    "build:side": "./build-dual.sh side",
    "build:main": "./build-dual.sh main",
    "build:npm": "deno run --allow-all _build_npm.ts",
    "build:all": "deno task build:wasm && deno task build:npm",
    "benchmark": "deno run --allow-read --allow-write bench/compression.bench.ts",
    "publish:npm": "deno task build:all && cd npm && npm publish",
    "publish:dry": "deno task build:all && cd npm && npm publish --dry-run",
    "clean": "rm -rf build-dual/ install/ dist/ npm/",
    "check": "deno check src/lib/index.ts",
    "check:all": "deno check src/lib/index.ts && deno check demo-deno.ts && deno check bench/compression.bench.ts && deno check _build_npm.ts"
  },
  "compilerOptions": {
    "lib": ["deno.ns", "dom", "es2022", "deno.unstable"],
    "strict": true,
    "noImplicitAny": true,
    "noImplicitReturns": true
  },
  "fmt": {
    "include": ["src/", "tests/", "demo-deno.ts", "bench/"],
    "exclude": ["dist/", "build-dual/", "install/", "npm/"]
  },
  "lint": {
    "include": ["src/", "tests/", "demo-deno.ts", "bench/"],
    "exclude": ["dist/", "build-dual/", "install/", "npm/"]
  },
  "test": {
    "include": ["tests/deno/"],
    "exclude": ["tests/unit/"]
  }
}