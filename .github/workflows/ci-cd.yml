name: CI/CD Pipeline

on:
  push:
    branches: [ wasm ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ wasm ]

env:
  NODE_VERSION: '22'
  EMSCRIPTEN_VERSION: '4.0.14'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22, 24]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}
      
      - name: Install dependencies
        run: |
          pnpm install --ignore-workspace --frozen-lockfile
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
      
      - name: Type check
        run: pnpm run type-check
      
      - name: Build dual WASM modules
        run: pnpm run build
      
      - name: Run unit tests
        run: pnpm run test:coverage
      
      - name: Run tests with coverage
        run: |
          pnpm run test:coverage
          
          # Generate test coverage summary
          echo "## üìà Test Coverage (Node.js ${{ matrix.node-version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f "coverage/coverage-summary.json" ]]; then
            # Extract coverage percentages using node
            STATEMENTS=$(node -pe "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.statements.pct")
            BRANCHES=$(node -pe "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.branches.pct")
            FUNCTIONS=$(node -pe "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.functions.pct")
            LINES=$(node -pe "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.lines.pct")
            
            echo "| Metric | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | ${STATEMENTS}% | $([ $(echo "$STATEMENTS > 90" | bc) -eq 1 ] && echo "‚úÖ Excellent" || echo "‚ö†Ô∏è Needs improvement") |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | ${BRANCHES}% | $([ $(echo "$BRANCHES > 80" | bc) -eq 1 ] && echo "‚úÖ Good" || echo "‚ö†Ô∏è Needs improvement") |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | ${FUNCTIONS}% | $([ $(echo "$FUNCTIONS > 90" | bc) -eq 1 ] && echo "‚úÖ Excellent" || echo "‚ö†Ô∏è Needs improvement") |" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | ${LINES}% | $([ $(echo "$LINES > 90" | bc) -eq 1 ] && echo "‚úÖ Excellent" || echo "‚ö†Ô∏è Needs improvement") |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Overall coverage status
            OVERALL=$(echo "scale=1; ($STATEMENTS + $BRANCHES + $FUNCTIONS + $LINES) / 4" | bc)
            echo "**Overall Coverage**: ${OVERALL}%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Coverage data not found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
          retention-days: 7

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}
      
      - name: Install dependencies
        run: |
          pnpm install --ignore-workspace --frozen-lockfile
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
      
      - name: Build dual WASM modules
        run: pnpm run build
      
      - name: Generate documentation
        run: |
          pnpm run build:docs || echo "Documentation generation skipped"
      
      - name: Package distribution
        run: pnpm pack
      
      - name: Generate WASM Build Summary
        run: |
          echo "# üì¶ WASM Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build artifacts analysis
          if [[ -f "install/wasm/zlib-side.wasm" && -f "install/wasm/zlib-release.wasm" && -f "install/wasm/zlib-release.js" ]]; then
            SIDE_SIZE=$(stat -c%s "install/wasm/zlib-side.wasm")
            MAIN_SIZE=$(stat -c%s "install/wasm/zlib-release.wasm")
            JS_SIZE=$(stat -c%s "install/wasm/zlib-release.js")
            TOTAL_SIZE=$((SIDE_SIZE + MAIN_SIZE + JS_SIZE))
            
            # Compression analysis
            SIDE_COMPRESSED=$(gzip -c "install/wasm/zlib-side.wasm" | wc -c)
            MAIN_COMPRESSED=$(gzip -c "install/wasm/zlib-release.wasm" | wc -c)
            JS_COMPRESSED=$(gzip -c "install/wasm/zlib-release.js" | wc -c)
            TOTAL_COMPRESSED=$((SIDE_COMPRESSED + MAIN_COMPRESSED + JS_COMPRESSED))
            
            SIDE_RATIO=$(echo "scale=2; $SIDE_SIZE / $SIDE_COMPRESSED" | bc)
            MAIN_RATIO=$(echo "scale=2; $MAIN_SIZE / $MAIN_COMPRESSED" | bc)
            JS_RATIO=$(echo "scale=2; $JS_SIZE / $JS_COMPRESSED" | bc)
            TOTAL_RATIO=$(echo "scale=2; $TOTAL_SIZE / $TOTAL_COMPRESSED" | bc)
            
            echo "## File Sizes" >> $GITHUB_STEP_SUMMARY
            echo "| Module | Size | Compressed | Ratio |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|------|------------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| SIDE_MODULE | $(numfmt --to=iec $SIDE_SIZE) | $(numfmt --to=iec $SIDE_COMPRESSED) | ${SIDE_RATIO}x |" >> $GITHUB_STEP_SUMMARY
            echo "| MAIN_MODULE | $(numfmt --to=iec $MAIN_SIZE) | $(numfmt --to=iec $MAIN_COMPRESSED) | ${MAIN_RATIO}x |" >> $GITHUB_STEP_SUMMARY
            echo "| JS Glue | $(numfmt --to=iec $JS_SIZE) | $(numfmt --to=iec $JS_COMPRESSED) | ${JS_RATIO}x |" >> $GITHUB_STEP_SUMMARY
            echo "| **Total** | **$(numfmt --to=iec $TOTAL_SIZE)** | **$(numfmt --to=iec $TOTAL_COMPRESSED)** | **${TOTAL_RATIO}x** |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Build artifacts not found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build environment info
          echo "## Build Environment" >> $GITHUB_STEP_SUMMARY
          echo "- **Emscripten**: \`$(emcc --version | head -n1 | cut -d' ' -f2)\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js**: \`$(node --version)\`" >> $GITHUB_STEP_SUMMARY
          echo "- **pnpm**: \`$(pnpm --version)\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: $(date -ud "@$SECONDS" +%M:%S)" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner**: \`$(uname -m)\` $(uname -s)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Run Performance Benchmarks
        run: |
          # Run benchmarks and capture output
          echo "Running comprehensive benchmarks..."
          pnpm run benchmark > benchmark-results.txt 2>&1 || true
          
          echo "## ‚ö° Performance Benchmarks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f "benchmark-results.txt" ]]; then
            # Extract key performance metrics from benchmark output
            if grep -q "Average compression speed" benchmark-results.txt; then
              AVG_COMP_SPEED=$(grep "Average compression speed" benchmark-results.txt | sed 's/.*: //' | sed 's/ .*//')
              BEST_RATIO=$(grep "Best compression ratio" benchmark-results.txt | sed 's/.*: //' | sed 's/:1//')
              
              echo "### Summary" >> $GITHUB_STEP_SUMMARY
              echo "- **Average Compression Speed**: ${AVG_COMP_SPEED}" >> $GITHUB_STEP_SUMMARY
              echo "- **Best Compression Ratio**: ${BEST_RATIO}:1" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Extract performance by data type
            if grep -q "Performance by Data Type" benchmark-results.txt; then
              echo "### Performance by Data Type" >> $GITHUB_STEP_SUMMARY
              echo "| Test Case | Avg Speed | Best Ratio |" >> $GITHUB_STEP_SUMMARY
              echo "|-----------|-----------|------------|" >> $GITHUB_STEP_SUMMARY
              
              # Parse each data type result
              grep -A10 "Performance by Data Type" benchmark-results.txt | grep -E "Small Text|Medium JSON|Large Text|Binary Pattern|Random Data" | while read -r line; do
                TEST_NAME=$(echo "$line" | cut -d: -f1 | xargs)
                METRICS=$(echo "$line" | cut -d: -f2 | xargs)
                echo "| $TEST_NAME | $(echo "$METRICS" | cut -d, -f1) | $(echo "$METRICS" | cut -d, -f2) |" >> $GITHUB_STEP_SUMMARY
              done
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Performance targets analysis
            if grep -q "Performance Analysis" benchmark-results.txt; then
              echo "### Quality Gates" >> $GITHUB_STEP_SUMMARY
              COMP_STATUS=$(grep -A2 "Compression performance" benchmark-results.txt | grep -o '[‚úÖ‚ö†Ô∏è].*')
              DECOMP_STATUS=$(grep -A2 "Decompression performance" benchmark-results.txt | grep -o '[‚úÖ‚ö†Ô∏è].*')
              
              echo "- **Compression**: $COMP_STATUS" >> $GITHUB_STEP_SUMMARY
              echo "- **Decompression**: $DECOMP_STATUS" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ö†Ô∏è Benchmark results not available" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-package
          path: |
            dist/
            install/
            benchmark-results.txt
            *.tgz
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --ignore-workspace --frozen-lockfile
      
      - name: Audit dependencies
        run: pnpm audit --audit-level=moderate
      
      - name: Check for vulnerabilities
        run: |
          # Additional vulnerability checking (audit-ci not configured yet)
          echo "Using pnpm audit for vulnerability detection"
          
          # Generate security summary
          echo "## üîí Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run audit and capture results
          pnpm audit --json > audit-results.json 2>/dev/null || true
          
          if [[ -f "audit-results.json" ]] && [[ -s "audit-results.json" ]]; then
            VULNERABILITIES=$(node -pe "try { JSON.parse(require('fs').readFileSync('audit-results.json')).vulnerabilities || 0 } catch(e) { 0 }")
            DEPENDENCIES=$(node -pe "Object.keys(JSON.parse(require('fs').readFileSync('package.json')).devDependencies || {}).length")
            
            echo "| Metric | Count | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Vulnerabilities | $VULNERABILITIES | $([ $VULNERABILITIES -eq 0 ] && echo "‚úÖ Clean" || echo "‚ö†Ô∏è Issues found") |" >> $GITHUB_STEP_SUMMARY
            echo "| Dev Dependencies | $DEPENDENCIES | $([ $DEPENDENCIES -lt 10 ] && echo "‚úÖ Minimal" || echo "‚ö†Ô∏è Many deps") |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **No security vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

  publish-npm:
    name: Publish to NPM (TEMPORARILY DISABLED)
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: false  # Temporarily disabled for Cloudflare CDN testing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'
      
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}
      
      - name: Install dependencies
        run: |
          pnpm install --ignore-workspace --frozen-lockfile
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
      
      - name: Build dual WASM modules
        run: pnpm run build
      
      - name: Run pre-publish tests
        run: pnpm run prepublishOnly
      
      - name: Publish to NPM
        run: pnpm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  deploy-cloudflare-release:
    name: Deploy Release to Cloudflare R2
    runs-on: ubuntu-latest
    needs: [build, security]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-package
          path: ./
      
      - name: Deploy versioned WASM to Cloudflare R2
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: |
            VERSION=v$(node -p "require('./package.json').version")
            
            # Deploy versioned WASM modules to new bucket (immutable)
            r2 object put discere-os-wasm-production/zlib/${VERSION}/side/zlib-side.wasm --file=install/wasm/zlib-side.wasm
            r2 object put discere-os-wasm-production/zlib/${VERSION}/main/zlib-release.js --file=install/wasm/zlib-release.js
            r2 object put discere-os-wasm-production/zlib/${VERSION}/main/zlib-release.wasm --file=install/wasm/zlib-release.wasm
            r2 object put discere-os-wasm-production/zlib/${VERSION}/package.json --file=package.json
      
      - name: Deploy latest WASM to Cloudflare R2
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: |
            # Deploy latest version (cache: 1 hour)
            r2 object put discere-os-wasm-production/zlib/latest/side/zlib-side.wasm --file=install/wasm/zlib-side.wasm
            r2 object put discere-os-wasm-production/zlib/latest/main/zlib-release.js --file=install/wasm/zlib-release.js
            r2 object put discere-os-wasm-production/zlib/latest/main/zlib-release.wasm --file=install/wasm/zlib-release.wasm
            r2 object put discere-os-wasm-production/zlib/latest/package.json --file=package.json
      
      - name: Verify Cloudflare deployment
        run: |
          VERSION=v$(node -p "require('./package.json').version")
          sleep 15  # Wait for R2 propagation
          curl -f "https://wasm.discere.cloud/zlib@${VERSION}/package.json" || exit 1
          echo "‚úÖ Cloudflare R2 deployment verified"

  deploy-cloudflare-snapshot:
    name: Deploy Snapshot to Cloudflare R2
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-package
          path: ./
      
      - name: Deploy snapshot WASM to Cloudflare R2
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: |
            VERSION=sha-$(git rev-parse --short HEAD)
            
            # Deploy snapshot WASM modules (30-day expiration)
            r2 object put discere-os-wasm-production/zlib/${VERSION}/side/zlib-side.wasm --file=install/wasm/zlib-side.wasm
            r2 object put discere-os-wasm-production/zlib/${VERSION}/main/zlib-release.js --file=install/wasm/zlib-release.js
            r2 object put discere-os-wasm-production/zlib/${VERSION}/main/zlib-release.wasm --file=install/wasm/zlib-release.wasm
            r2 object put discere-os-wasm-production/zlib/${VERSION}/package.json --file=package.json
            
            echo "‚úÖ Snapshot ${VERSION} deployed to Cloudflare R2"
      
      - name: Verify snapshot deployment
        run: |
          VERSION=sha-$(git rev-parse --short HEAD)
          sleep 15  # Wait for R2 propagation
          
          echo "## üöÄ Snapshot Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test CDN endpoints
          ENDPOINTS=(
            "https://wasm.discere.cloud/zlib@${VERSION}/package.json"
            "https://wasm.discere.cloud/zlib@${VERSION}/side/zlib-side.wasm"
            "https://wasm.discere.cloud/zlib@${VERSION}/main/zlib-release.js"
          )
          
          echo "| Endpoint | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for endpoint in "${ENDPOINTS[@]}"; do
            if curl -f --head "$endpoint" > /dev/null 2>&1; then
              echo "| \`$(basename "$endpoint")\` | ‚úÖ Available |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| \`$(basename "$endpoint")\` | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**CDN Base URL**: https://wasm.discere.cloud/zlib@${VERSION}/" >> $GITHUB_STEP_SUMMARY
          echo "**Expiration**: 30 days (snapshot)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Verify primary endpoint
          curl -f "https://wasm.discere.cloud/zlib@${VERSION}/package.json" || exit 1
          echo "‚úÖ Snapshot deployment verified: https://wasm.discere.cloud/zlib@${VERSION}/"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-cloudflare-release, deploy-cloudflare-snapshot]
    if: always() && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify release success
        if: startsWith(github.ref, 'refs/tags/v') && needs.deploy-cloudflare-release.result == 'success'
        run: |
          echo "üöÄ zlib.wasm v$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//') deployed successfully"
          echo "üåê Cloudflare R2: https://wasm.discere.cloud/zlib@v$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')/"
      
      - name: Notify snapshot success
        if: github.ref == 'refs/heads/main' && needs.deploy-cloudflare-snapshot.result == 'success'
        run: |
          VERSION=sha-$(git rev-parse --short HEAD)
          echo "üöÄ zlib.wasm snapshot ${VERSION} deployed successfully"
          echo "üåê Cloudflare R2: https://wasm.discere.cloud/zlib@${VERSION}/"
      
      - name: Notify failure
        if: (needs.deploy-cloudflare-release.result == 'failure') || (needs.deploy-cloudflare-snapshot.result == 'failure')
        run: |
          echo "‚ùå Deployment failed for zlib.wasm"
          exit 1
